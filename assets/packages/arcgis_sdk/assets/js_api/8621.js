"use strict";(self.webpackChunkarcgis_node=self.webpackChunkarcgis_node||[]).push([[8621],{78621:(e,t,r)=>{r.r(t),r.d(t,{assetMapFromAssetMapsJSON:()=>y,extractMesh:()=>g,meshFeatureSetFromJSON:()=>E});var n=r(20857),s=r(80861),a=r(80294),o=r(8e3),u=r(70231),i=r(1912),c=r(44153),l=r(77873),f=r(28936),p=r(52360),m=r(74704);const h=()=>s.A.getLogger("esri.rest.support.meshFeatureSet");function E(e,t,r){const s=r.features;r.features=[],delete r.geometryType;const a=m.A.fromJSON(r);if(a.geometryType="mesh",!r.assetMaps)return a;const o=y(t,r.assetMaps),u=e.sourceSpatialReference??c.A.WGS84,i=r.globalIdFieldName,{outFields:l}=e,f=null!=l&&l.length>0?(p=l.includes("*")?null:new Set(l),({attributes:e})=>{if(!e)return{};if(!p)return e;for(const t in e)p.has(t)||delete e[t];return e}):()=>({});var p;for(const e of s){const r=g(e,i,u,t,o);a.features.push(new n.A({geometry:r,attributes:f(e)}))}return a}function g(e,t,r,n,s){const a=e.attributes[t],c=s.get(a);if(null==c||!e.geometry)return null;const p=function({attributes:e},t,{transformFieldRoles:r}){const n=e[r.originX],s=e[r.originY],a=e[r.originZ];return new i.A({x:n,y:s,z:a,spatialReference:t})}(e,r,n),m=o.A.fromJSON(e.geometry);m.spatialReference=r;const h=function(e,{transformFieldRoles:t}){return new l.A({translation:[e[t.translationX],-e[t.translationZ],e[t.translationY]],rotationAxis:[e[t.rotationX],-e[t.rotationZ],e[t.rotationY]],rotationAngle:e[t.rotationDeg],scale:[e[t.scaleX],e[t.scaleZ],e[t.scaleY]]})}(e.attributes,n),E=r.isGeographic?"local":"georeferenced",g=function(e){const t=Array.from(e.files.values()),r=new Array;for(const e of t){if(e.status!==d.COMPLETED)return null;const t=new Array;for(const r of e.parts){if(!r)return null;t.push(new f.Bq(r.url,r.hash))}r.push(new f.Qp(e.name,e.mimeType,t))}return r}(c);return g?u.A.createWithExternalSource(p,g,{extent:m,transform:h,vertexSpace:E}):u.A.createIncomplete(p,{extent:m,transform:h,vertexSpace:E})}var d,A;function y(e,t){const r=new Map;for(const n of t){const t=n.parentGlobalId;if(null==t)continue;const s=n.assetName,o=n.assetType,u=n.assetHash,i=n.assetURL,c=n.conversionStatus,l=n.seqNo,f=(0,p.Fm)(o,e.supportedFormats);if(!f){h().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${o}, but it does not list it as a supported type`);continue}const m=(0,a.tE)(r,t,(()=>({files:new Map})));(0,a.tE)(m.files,s,(()=>({name:s,type:o,mimeType:f,status:S(c),parts:[]}))).parts[l]={hash:u,url:i}}return r}function S(e){switch(e){case"COMPLETED":case"SUBMITTED":return d.COMPLETED;case"INPROGRESS":return d.PENDING;default:return d.FAILED}}(A=d||(d={}))[A.FAILED=0]="FAILED",A[A.PENDING=1]="PENDING",A[A.COMPLETED=2]="COMPLETED"}}]);